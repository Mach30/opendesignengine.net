Index: trunk/docs/Link Budget.ipynb
===================================================================
--- trunk/docs/Link Budget.ipynb	(revision 10)
+++ trunk/docs/Link Budget.ipynb	(revision 11)
@@ -1,6 +1,26 @@
 {
  "cells": [
   {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {
+    "collapsed": true,
+    "hide_input": true
+   },
+   "outputs": [],
+   "source": [
+    "import math\n",
+    "#import pint\n",
+    "#units = pint.UnitRegistry()\n",
+    "\n",
+    "#units.define('dBw = 10 * math.log10(units.watt)')\n",
+    "\n",
+    "#transmitter_power = 25 * units.watt\n",
+    "#transmitter_gain = transmitter_power.to(units.dBw)\n",
+    "#antenna_gain = 6 * units.dBw"
+   ]
+  },
+  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
@@ -10,8 +30,10 @@
     "\n",
     "The calculations themsleves are implemented by a python class named LinkBudget. The class models what are generally the most significant factors in calculating a link budget. Because there are many factors that are difficult or impossible to accurately factor in, such as the amount a given storm may introduce noise into the system, several aspects of the budget are averages or otherwise estimated values.\n",
     "\n",
+    "The overall equation for the Link Budget is Transmitted Power(dB) + Gains(dB) - Losses(dB). This Link Budget equation will further be broken down \n",
+    "\n",
     "## Overview\n",
-    "\n",
+    " \n",
     "For each test case presented, the LinkBudget class uses the broadcast frequency of the satellite radio system, as well as its total estimated power (gain) as a basis of calculation (more information on this will be provided later). Next, some trigonometry is performed to determine the distance the satellite might be from the ground station in an observation window to factor in propagation loss due to the signal spreading as it travels from the satellite to the ground staiton. This distance and the frequency are also used to determine the loss in signal strength due to it having to travel through air, otherwise known as the free space propagation loss. Possible noise generated by weather and other background sources such as microwave ovens are also factored in when applicable. Lastly, the capabilities of the ground station to amplify the signal are also taken into account. \n"
    ]
   },
@@ -40,26 +62,6 @@
    ]
   },
   {
-   "cell_type": "code",
-   "execution_count": 11,
-   "metadata": {
-    "collapsed": false,
-    "hide_input": true
-   },
-   "outputs": [],
-   "source": [
-    "import math\n",
-    "#import pint\n",
-    "#units = pint.UnitRegistry()\n",
-    "\n",
-    "#units.define('dBw = 10 * math.log10(units.watt)')\n",
-    "\n",
-    "#transmitter_power = 25 * units.watt\n",
-    "#transmitter_gain = transmitter_power.to(units.dBw)\n",
-    "#antenna_gain = 6 * units.dBw"
-   ]
-  },
-  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
@@ -68,9 +70,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 3,
    "metadata": {
-    "collapsed": false,
+    "collapsed": true,
     "hide_input": true
    },
    "outputs": [],
@@ -86,7 +88,7 @@
     "variables": {
      "antenna_gain": "6",
      "round(transmitter_gain, 4)": "13.9794",
-     "transmitter_power": "25"
+     "transmitter_power": "25.0"
     }
    },
    "source": [
@@ -97,7 +99,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 7,
    "metadata": {
     "collapsed": true,
     "hide_input": true
@@ -119,14 +121,12 @@
     }
    },
    "source": [
-    "The second step is listing all of the other components involved in the transmission process. For this example, we will assume there is a transmission wire, a frequency filter (used to ensure that only a range or band of frequencies are transmitted), and associated connectors. As an estimate for a 10 meter (33 feet) transmission wire, it has a loss of {{abs(est_wire_gain)}}dBw. Note that this increases exponentially with the length of the wire. Our estimate for this example of the loss from the filter and connectors is an additional {{abs(est_connector_gain)}}dBw. Finally, we need to account for signal loss due to the antenna not being pointed directly at the receiver. Given the wide dispersion area of the signal from our antenna, we're estimating this at {{abs(est_pointing_loss)}}dBw.\n",
-    "\n",
-    "With values for the gain and loss of each of the components, we can now simply add them together to determine the transmission gain."
+    "The second step is listing all of the other components involved in the transmission process. For this example, we will assume there is a transmission wire, a frequency filter (used to ensure that only a range or band of frequencies are transmitted), and associated connectors. As an estimate for a 10 meter (33 feet) transmission wire, it has a loss of {{abs(est_wire_gain)}}dBw. Note that this increases exponentially with the length of the wire. Our estimate for this example of the loss from the filter and connectors is an additional {{abs(est_connector_gain)}}dBw. Finally, we need to account for signal loss due to the antenna not being pointed directly at the receiver. Given the wide dispersion area of the signal from our antenna, we're estimating this at {{abs(est_pointing_loss)}}dBw. With values for the gain and loss of each of the components, we can now simply add them together to determine the transmission gain."
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 5,
    "metadata": {
     "collapsed": true,
     "hide_input": true
@@ -235,6 +235,15 @@
    },
    "outputs": [],
    "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
@@ -242,6 +251,18 @@
    "display_name": "Python 3",
    "language": "python",
    "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.6.1"
   }
  },
  "nbformat": 4,
