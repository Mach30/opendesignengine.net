Index: trunk/HoloseatConfigurationApp_Win/HoloseatConfig.cs
===================================================================
--- trunk/HoloseatConfigurationApp_Win/HoloseatConfig.cs	(revision 50)
+++ trunk/HoloseatConfigurationApp_Win/HoloseatConfig.cs	(revision 51)
@@ -17,14 +17,14 @@
 
 using System;
 using System.IO;
-//using System.IO.Ports;
-using RJCP.IO.Ports;
+using RJCP.IO.Ports; //From https://github.com/jcurl/serialportstream Replacement serial library to resolve problems with built in serial libraries
 
 namespace HoloSeatConfig
 {
     class HoloseatConfigurationFile
     {
-        //Publically accessible variables for the number of steps constant and the walk command constant
+        //Publically accessible variables for the number of steps constant and the walk command constant  Publicly declared to be referenced by UI
+        //instead of needing a get function.
         public double TriggerStepsPerMin;
         public char WalkForwardCommandChar;
         public char WalkBackwardCommandChar;
@@ -32,27 +32,33 @@
         public string HardwareType; //Valid types as of this version are "feather" for the Adafruit feather boards or "leo" for the Arduino Leonardo board
         public string SerialLog;
         public Boolean HoloSeatOn;
+        public string ArduinoPath;
 
         //Location of the configuration file
         private const string ConstantsFile = @".\holoseat_firmware\holoseat_constants.h";
-        private const string HoloseatFirmware= @".\holoseat_firmware\holoseat_firmware.ino";
-        private string Arguments = " --board arduino:avr:leonardo --port ";
-        private const string ArduinoInstallLocation = @".\Arduino\arduino.exe";
+        private const string HoloseatFirmware= @".\holoseat_firmware\holoseat_firmware.ino";      
+
         private const int DebugEnable = 0;
         private const int DebugRate = 10;
-
         private const Boolean NoArduino = false;
 
+        //Internal variables
+        private string Arguments = " --board arduino:avr:leonardo --port ";
+
         //Contructor for the class.  Searches the holoseat_firmware directory under where the program is stored to get the current settings
         //If the settings are found it sets them into the variables.  If they're missing it instead sets them to defaults of 75 steps per minute
         //and W.
         public HoloseatConfigurationFile()
         {           
+            //Setting default values
             TriggerStepsPerMin = 75;
             WalkForwardCommandChar = 'W';
             WalkBackwardCommandChar = 'S';
             SerialPort = "COM0";
             HardwareType = "feather";
+            ArduinoPath = @"C:\Program Files (x86)\Arduino\arduino.exe";
+
+            //Reading the configuration file and parsing it into the settings
             using (StreamReader FileLine = new StreamReader(ConstantsFile))
                 while (FileLine.Peek() >= 0)
                 {
@@ -86,6 +92,11 @@
                                     HardwareType = Convert.ToString(CurrentLine.Split('=')[1].Replace(';', ' ').Trim());
                                     break;
                                 }
+                            case "//Arduino Path ":
+                                {
+                                    ArduinoPath = Convert.ToString(CurrentLine.Split('=')[1].Replace(';', ' ').Trim());
+                                    break;
+                                }
 
                         }
                 }
@@ -140,7 +151,8 @@
                 return 0;
             }
         }
-        //Update the configuration file specified in the constant above based on the current contents of TriggerStepsPerMin and WalkCommandchar.
+
+        //Update the configuration file specified in the constant above based on the current configuration contents of the object.
         public string WriteConfiguration()
         {
             if (File.Exists(ConstantsFile))
@@ -171,6 +183,7 @@
                     ConfigFile.WriteLine("//Holoseat Configurator Variables");
                     ConfigFile.WriteLine("//Hardware Type = " + HardwareType + ";");
                     ConfigFile.WriteLine("//Serial Port = " + SerialPort + ";");
+                    ConfigFile.WriteLine("//Arduino Path = " + ArduinoPath + ";");
                     ConfigFile.WriteLine("");
                     ConfigFile.WriteLine("// other boot parameters");
                     ConfigFile.WriteLine("const unsigned int SerialBaudRate = 57600;");
@@ -183,12 +196,13 @@
                 return e.ToString();
             }
         }
+
+// This command opens the serial communication using SerialPortStream library and sends a configuration string following the Holoseat Serial config protocol
         private Boolean SendCommandToSerial(string CommandString)
         {
             string ReturnLine;
             string PortID = SerialPort;
             Boolean Result = true;
-//            System.IO.Ports.SerialPort MyPort = new System.IO.Ports.SerialPort(PortID);
             SerialPortStream MyPort = new SerialPortStream();
             MyPort.PortName = PortID;
             MyPort.BaudRate = 9600;
@@ -200,7 +214,6 @@
             MyPort.WriteTimeout = 5000;
             SerialLog = "Opening Port " + PortID + System.Environment.NewLine;
             MyPort.Open();
-            //System.Threading.Thread.Sleep(1000);
             if (MyPort.IsOpen == true)
             {
                 SerialLog = SerialLog + ("COM Port open" + System.Environment.NewLine);
@@ -214,7 +227,6 @@
                     if (ReturnLine.Substring(1, 1) != "R")
                     {
                         Result = false;
-
                     }
                     SerialLog = SerialLog + ("Sending selected output" + System.Environment.NewLine);
                     MyPort.WriteLine(CommandString);
@@ -236,14 +248,14 @@
             }
         }
 
-        //Pushes the configuration file to the Lenoardo so the settings are updated.
+        //Pushes the configuration file to the Arduino so the settings are updated.
         public int UpdateHoloseat()
         {
             SetArguments();
             WriteConfiguration();
             System.Diagnostics.Process ArduinoUpload = new System.Diagnostics.Process();
-            ArduinoUpload.StartInfo.FileName = ArduinoInstallLocation;
-            if (NoArduino==true)
+            ArduinoUpload.StartInfo.FileName = ArduinoPath;
+            if (NoArduino==true) //Used in testing to confirm the firmware is good if the holoseat is not connected.
             {
                 ArduinoUpload.StartInfo.Arguments = "--verify ." + HoloseatFirmware;
             }
Index: trunk/HoloseatConfigurationApp_Win/Configuration.Designer.cs
===================================================================
--- trunk/HoloseatConfigurationApp_Win/Configuration.Designer.cs	(revision 50)
+++ trunk/HoloseatConfigurationApp_Win/Configuration.Designer.cs	(revision 51)
@@ -47,7 +47,7 @@
         {
             System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Configuration));
             this.WalkForwardKey = new System.Windows.Forms.TextBox();
-            this.label1 = new System.Windows.Forms.Label();
+            this.ForwardKeyLabel = new System.Windows.Forms.Label();
             this.TriggerSteps = new System.Windows.Forms.TrackBar();
             this.label2 = new System.Windows.Forms.Label();
             this.TriggerStepsNumber = new System.Windows.Forms.TextBox();
@@ -58,74 +58,70 @@
             this.UploadResult = new System.Windows.Forms.TextBox();
             this.label3 = new System.Windows.Forms.Label();
             this.label4 = new System.Windows.Forms.Label();
-            this.label5 = new System.Windows.Forms.Label();
+            this.SerialPortLabel = new System.Windows.Forms.Label();
             this.SerialPortList = new System.Windows.Forms.ComboBox();
             this.SerialOutput = new System.Windows.Forms.TextBox();
             this.EnableHoloseat = new System.Windows.Forms.CheckBox();
             this.HardwareType = new System.Windows.Forms.ComboBox();
-            this.label7 = new System.Windows.Forms.Label();
+            this.HardwareLabel = new System.Windows.Forms.Label();
             this.label6 = new System.Windows.Forms.Label();
-            this.label8 = new System.Windows.Forms.Label();
+            this.BackwardKeyLabel = new System.Windows.Forms.Label();
             this.WalkBackwardKey = new System.Windows.Forms.TextBox();
+            this.ArduinoPathLabel = new System.Windows.Forms.Label();
+            this.ArduinoPath = new System.Windows.Forms.TextBox();
             ((System.ComponentModel.ISupportInitialize)(this.TriggerSteps)).BeginInit();
             this.SuspendLayout();
             // 
             // WalkForwardKey
             // 
-            this.WalkForwardKey.Location = new System.Drawing.Point(162, 202);
-            this.WalkForwardKey.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.WalkForwardKey.Location = new System.Drawing.Point(85, 124);
             this.WalkForwardKey.Name = "WalkForwardKey";
-            this.WalkForwardKey.Size = new System.Drawing.Size(342, 31);
+            this.WalkForwardKey.Size = new System.Drawing.Size(173, 20);
             this.WalkForwardKey.TabIndex = 1;
             this.WalkForwardKey.TextChanged += new System.EventHandler(this.WalkKey_TextChanged);
             // 
-            // label1
+            // ForwardKeyLabel
             // 
-            this.label1.AutoSize = true;
-            this.label1.Location = new System.Drawing.Point(18, 202);
-            this.label1.Margin = new System.Windows.Forms.Padding(6, 0, 6, 0);
-            this.label1.Name = "label1";
-            this.label1.Size = new System.Drawing.Size(133, 25);
-            this.label1.TabIndex = 1;
-            this.label1.Text = "Forward Key";
-            this.label1.Click += new System.EventHandler(this.label1_Click);
+            this.ForwardKeyLabel.AutoSize = true;
+            this.ForwardKeyLabel.Location = new System.Drawing.Point(9, 124);
+            this.ForwardKeyLabel.Name = "ForwardKeyLabel";
+            this.ForwardKeyLabel.Size = new System.Drawing.Size(66, 13);
+            this.ForwardKeyLabel.TabIndex = 1;
+            this.ForwardKeyLabel.Text = "Forward Key";
+            this.ForwardKeyLabel.Click += new System.EventHandler(this.label1_Click);
             // 
             // TriggerSteps
             // 
-            this.TriggerSteps.Location = new System.Drawing.Point(162, 287);
-            this.TriggerSteps.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.TriggerSteps.Location = new System.Drawing.Point(81, 168);
             this.TriggerSteps.Maximum = 120;
             this.TriggerSteps.Name = "TriggerSteps";
-            this.TriggerSteps.Size = new System.Drawing.Size(346, 90);
+            this.TriggerSteps.Size = new System.Drawing.Size(173, 45);
             this.TriggerSteps.TabIndex = 2;
             this.TriggerSteps.Scroll += new System.EventHandler(this.TriggerSteps_Scroll);
             // 
             // label2
             // 
             this.label2.AutoSize = true;
-            this.label2.Location = new System.Drawing.Point(18, 287);
-            this.label2.Margin = new System.Windows.Forms.Padding(6, 0, 6, 0);
+            this.label2.Location = new System.Drawing.Point(9, 168);
             this.label2.Name = "label2";
-            this.label2.Size = new System.Drawing.Size(131, 25);
+            this.label2.Size = new System.Drawing.Size(66, 13);
             this.label2.TabIndex = 3;
             this.label2.Text = "Trigger Rate";
             // 
             // TriggerStepsNumber
             // 
-            this.TriggerStepsNumber.Location = new System.Drawing.Point(24, 335);
-            this.TriggerStepsNumber.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.TriggerStepsNumber.Location = new System.Drawing.Point(12, 193);
             this.TriggerStepsNumber.Name = "TriggerStepsNumber";
             this.TriggerStepsNumber.ReadOnly = true;
-            this.TriggerStepsNumber.Size = new System.Drawing.Size(110, 31);
+            this.TriggerStepsNumber.Size = new System.Drawing.Size(57, 20);
             this.TriggerStepsNumber.TabIndex = 4;
             this.TriggerStepsNumber.TabStop = false;
             // 
             // UpdateHoloseat
             // 
-            this.UpdateHoloseat.Location = new System.Drawing.Point(24, 385);
-            this.UpdateHoloseat.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.UpdateHoloseat.Location = new System.Drawing.Point(12, 219);
             this.UpdateHoloseat.Name = "UpdateHoloseat";
-            this.UpdateHoloseat.Size = new System.Drawing.Size(150, 83);
+            this.UpdateHoloseat.Size = new System.Drawing.Size(75, 43);
             this.UpdateHoloseat.TabIndex = 5;
             this.UpdateHoloseat.Text = "Update Holoseat";
             this.UpdateHoloseat.UseVisualStyleBackColor = true;
@@ -133,10 +129,9 @@
             // 
             // CloseForm
             // 
-            this.CloseForm.Location = new System.Drawing.Point(358, 385);
-            this.CloseForm.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.CloseForm.Location = new System.Drawing.Point(179, 219);
             this.CloseForm.Name = "CloseForm";
-            this.CloseForm.Size = new System.Drawing.Size(150, 83);
+            this.CloseForm.Size = new System.Drawing.Size(75, 43);
             this.CloseForm.TabIndex = 6;
             this.CloseForm.Text = "Close";
             this.CloseForm.UseVisualStyleBackColor = true;
@@ -144,20 +139,18 @@
             // 
             // Result
             // 
-            this.Result.Location = new System.Drawing.Point(602, 48);
-            this.Result.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.Result.Location = new System.Drawing.Point(301, 25);
             this.Result.Name = "Result";
             this.Result.ReadOnly = true;
-            this.Result.Size = new System.Drawing.Size(422, 31);
+            this.Result.Size = new System.Drawing.Size(213, 20);
             this.Result.TabIndex = 7;
             this.Result.TabStop = false;
             // 
             // UpdateDefaults
             // 
-            this.UpdateDefaults.Location = new System.Drawing.Point(186, 385);
-            this.UpdateDefaults.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.UpdateDefaults.Location = new System.Drawing.Point(93, 219);
             this.UpdateDefaults.Name = "UpdateDefaults";
-            this.UpdateDefaults.Size = new System.Drawing.Size(150, 83);
+            this.UpdateDefaults.Size = new System.Drawing.Size(75, 43);
             this.UpdateDefaults.TabIndex = 8;
             this.UpdateDefaults.Text = "Update Defaults";
             this.UpdateDefaults.UseVisualStyleBackColor = true;
@@ -166,62 +159,56 @@
             // UploadResult
             // 
             this.UploadResult.AcceptsReturn = true;
-            this.UploadResult.Location = new System.Drawing.Point(604, 148);
-            this.UploadResult.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.UploadResult.Location = new System.Drawing.Point(302, 77);
             this.UploadResult.Name = "UploadResult";
             this.UploadResult.ReadOnly = true;
-            this.UploadResult.Size = new System.Drawing.Size(420, 31);
+            this.UploadResult.Size = new System.Drawing.Size(212, 20);
             this.UploadResult.TabIndex = 9;
             this.UploadResult.TabStop = false;
             // 
             // label3
             // 
             this.label3.AutoSize = true;
-            this.label3.Location = new System.Drawing.Point(596, 17);
-            this.label3.Margin = new System.Windows.Forms.Padding(6, 0, 6, 0);
+            this.label3.Location = new System.Drawing.Point(298, 9);
             this.label3.Name = "label3";
-            this.label3.Size = new System.Drawing.Size(128, 25);
+            this.label3.Size = new System.Drawing.Size(65, 13);
             this.label3.TabIndex = 10;
             this.label3.Text = "Save Result";
             // 
             // label4
             // 
             this.label4.AutoSize = true;
-            this.label4.Location = new System.Drawing.Point(596, 117);
-            this.label4.Margin = new System.Windows.Forms.Padding(6, 0, 6, 0);
+            this.label4.Location = new System.Drawing.Point(298, 61);
             this.label4.Name = "label4";
-            this.label4.Size = new System.Drawing.Size(147, 25);
+            this.label4.Size = new System.Drawing.Size(74, 13);
             this.label4.TabIndex = 11;
             this.label4.Text = "Upload Result";
             // 
-            // label5
+            // SerialPortLabel
             // 
-            this.label5.AutoSize = true;
-            this.label5.Location = new System.Drawing.Point(20, 63);
-            this.label5.Margin = new System.Windows.Forms.Padding(6, 0, 6, 0);
-            this.label5.Name = "label5";
-            this.label5.Size = new System.Drawing.Size(112, 25);
-            this.label5.TabIndex = 13;
-            this.label5.Text = "Serial Port";
+            this.SerialPortLabel.AutoSize = true;
+            this.SerialPortLabel.Location = new System.Drawing.Point(10, 52);
+            this.SerialPortLabel.Name = "SerialPortLabel";
+            this.SerialPortLabel.Size = new System.Drawing.Size(55, 13);
+            this.SerialPortLabel.TabIndex = 13;
+            this.SerialPortLabel.Text = "Serial Port";
             // 
             // SerialPortList
             // 
             this.SerialPortList.FormattingEnabled = true;
-            this.SerialPortList.Location = new System.Drawing.Point(162, 48);
-            this.SerialPortList.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.SerialPortList.Location = new System.Drawing.Point(85, 44);
             this.SerialPortList.Name = "SerialPortList";
-            this.SerialPortList.Size = new System.Drawing.Size(342, 33);
+            this.SerialPortList.Size = new System.Drawing.Size(173, 21);
             this.SerialPortList.TabIndex = 14;
             // 
             // SerialOutput
             // 
             this.SerialOutput.Cursor = System.Windows.Forms.Cursors.IBeam;
-            this.SerialOutput.Location = new System.Drawing.Point(602, 256);
-            this.SerialOutput.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.SerialOutput.Location = new System.Drawing.Point(301, 133);
             this.SerialOutput.Multiline = true;
             this.SerialOutput.Name = "SerialOutput";
             this.SerialOutput.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
-            this.SerialOutput.Size = new System.Drawing.Size(422, 121);
+            this.SerialOutput.Size = new System.Drawing.Size(213, 65);
             this.SerialOutput.TabIndex = 15;
             // 
             // EnableHoloseat
@@ -229,10 +216,9 @@
             this.EnableHoloseat.AutoSize = true;
             this.EnableHoloseat.Checked = true;
             this.EnableHoloseat.CheckState = System.Windows.Forms.CheckState.Checked;
-            this.EnableHoloseat.Location = new System.Drawing.Point(24, 158);
-            this.EnableHoloseat.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.EnableHoloseat.Location = new System.Drawing.Point(12, 101);
             this.EnableHoloseat.Name = "EnableHoloseat";
-            this.EnableHoloseat.Size = new System.Drawing.Size(202, 29);
+            this.EnableHoloseat.Size = new System.Drawing.Size(104, 17);
             this.EnableHoloseat.TabIndex = 17;
             this.EnableHoloseat.Text = "Enable Holoseat";
             this.EnableHoloseat.UseVisualStyleBackColor = true;
@@ -245,67 +231,82 @@
             this.HardwareType.Items.AddRange(new object[] {
             "leo",
             "feather"});
-            this.HardwareType.Location = new System.Drawing.Point(162, 110);
-            this.HardwareType.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
+            this.HardwareType.Location = new System.Drawing.Point(85, 76);
             this.HardwareType.Name = "HardwareType";
-            this.HardwareType.Size = new System.Drawing.Size(238, 33);
+            this.HardwareType.Size = new System.Drawing.Size(121, 21);
             this.HardwareType.TabIndex = 18;
             this.HardwareType.Text = "feather";
             // 
-            // label7
+            // HardwareLabel
             // 
-            this.label7.AutoSize = true;
-            this.label7.Location = new System.Drawing.Point(18, 125);
-            this.label7.Margin = new System.Windows.Forms.Padding(6, 0, 6, 0);
-            this.label7.Name = "label7";
-            this.label7.Size = new System.Drawing.Size(104, 25);
-            this.label7.TabIndex = 19;
-            this.label7.Text = "Hardware";
+            this.HardwareLabel.AutoSize = true;
+            this.HardwareLabel.Location = new System.Drawing.Point(9, 84);
+            this.HardwareLabel.Name = "HardwareLabel";
+            this.HardwareLabel.Size = new System.Drawing.Size(53, 13);
+            this.HardwareLabel.TabIndex = 19;
+            this.HardwareLabel.Text = "Hardware";
             // 
             // label6
             // 
             this.label6.AutoSize = true;
-            this.label6.Location = new System.Drawing.Point(596, 208);
-            this.label6.Margin = new System.Windows.Forms.Padding(6, 0, 6, 0);
+            this.label6.Location = new System.Drawing.Point(298, 108);
             this.label6.Name = "label6";
-            this.label6.Size = new System.Drawing.Size(137, 25);
+            this.label6.Size = new System.Drawing.Size(68, 13);
             this.label6.TabIndex = 20;
             this.label6.Text = "Serial Output";
             this.label6.Click += new System.EventHandler(this.label6_Click);
             // 
-            // label8
+            // BackwardKeyLabel
             // 
-            this.label8.AutoSize = true;
-            this.label8.Location = new System.Drawing.Point(18, 244);
-            this.label8.Margin = new System.Windows.Forms.Padding(6, 0, 6, 0);
-            this.label8.Name = "label8";
-            this.label8.Size = new System.Drawing.Size(149, 25);
-            this.label8.TabIndex = 21;
-            this.label8.Text = "Backward Key";
+            this.BackwardKeyLabel.AutoSize = true;
+            this.BackwardKeyLabel.Location = new System.Drawing.Point(9, 146);
+            this.BackwardKeyLabel.Name = "BackwardKeyLabel";
+            this.BackwardKeyLabel.Size = new System.Drawing.Size(76, 13);
+            this.BackwardKeyLabel.TabIndex = 21;
+            this.BackwardKeyLabel.Text = "Backward Key";
             // 
             // WalkBackwardKey
             // 
-            this.WalkBackwardKey.Location = new System.Drawing.Point(162, 244);
-            this.WalkBackwardKey.Margin = new System.Windows.Forms.Padding(6);
+            this.WalkBackwardKey.Location = new System.Drawing.Point(85, 146);
             this.WalkBackwardKey.Name = "WalkBackwardKey";
-            this.WalkBackwardKey.Size = new System.Drawing.Size(342, 31);
+            this.WalkBackwardKey.Size = new System.Drawing.Size(173, 20);
             this.WalkBackwardKey.TabIndex = 22;
             this.WalkBackwardKey.TextChanged += new System.EventHandler(this.WalkBackwardKey_TextChanged);
             // 
+            // ArduinoPathLabel
+            // 
+            this.ArduinoPathLabel.AutoSize = true;
+            this.ArduinoPathLabel.Location = new System.Drawing.Point(10, 19);
+            this.ArduinoPathLabel.Name = "ArduinoPathLabel";
+            this.ArduinoPathLabel.Size = new System.Drawing.Size(68, 13);
+            this.ArduinoPathLabel.TabIndex = 23;
+            this.ArduinoPathLabel.Text = "Arduino Path";
+            this.ArduinoPathLabel.Click += new System.EventHandler(this.label9_Click);
+            // 
+            // ArduinoPath
+            // 
+            this.ArduinoPath.Location = new System.Drawing.Point(85, 12);
+            this.ArduinoPath.Name = "ArduinoPath";
+            this.ArduinoPath.Size = new System.Drawing.Size(173, 20);
+            this.ArduinoPath.TabIndex = 24;
+            this.ArduinoPath.TextChanged += new System.EventHandler(this.ArduinoPath_TextChanged);
+            // 
             // Configuration
             // 
-            this.AutoScaleDimensions = new System.Drawing.SizeF(12F, 25F);
+            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
-            this.ClientSize = new System.Drawing.Size(1058, 491);
-            this.Controls.Add(this.label8);
+            this.ClientSize = new System.Drawing.Size(529, 287);
+            this.Controls.Add(this.ArduinoPath);
+            this.Controls.Add(this.ArduinoPathLabel);
+            this.Controls.Add(this.BackwardKeyLabel);
             this.Controls.Add(this.WalkBackwardKey);
             this.Controls.Add(this.label6);
-            this.Controls.Add(this.label7);
+            this.Controls.Add(this.HardwareLabel);
             this.Controls.Add(this.HardwareType);
             this.Controls.Add(this.EnableHoloseat);
             this.Controls.Add(this.SerialOutput);
             this.Controls.Add(this.SerialPortList);
-            this.Controls.Add(this.label5);
+            this.Controls.Add(this.SerialPortLabel);
             this.Controls.Add(this.label4);
             this.Controls.Add(this.label3);
             this.Controls.Add(this.UploadResult);
@@ -316,10 +317,9 @@
             this.Controls.Add(this.TriggerStepsNumber);
             this.Controls.Add(this.label2);
             this.Controls.Add(this.TriggerSteps);
-            this.Controls.Add(this.label1);
+            this.Controls.Add(this.ForwardKeyLabel);
             this.Controls.Add(this.WalkForwardKey);
             this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
-            this.Margin = new System.Windows.Forms.Padding(6, 6, 6, 6);
             this.Name = "Configuration";
             this.Text = "Holoseat Configuration";
             this.Load += new System.EventHandler(this.Configuration_Load);
@@ -332,7 +332,7 @@
         #endregion
 
         private System.Windows.Forms.TextBox WalkForwardKey;
-        private System.Windows.Forms.Label label1;
+        private System.Windows.Forms.Label ForwardKeyLabel;
         private System.Windows.Forms.TrackBar TriggerSteps;
         private System.Windows.Forms.Label label2;
         private System.Windows.Forms.TextBox TriggerStepsNumber;
@@ -343,14 +343,16 @@
         private System.Windows.Forms.TextBox UploadResult;
         private System.Windows.Forms.Label label3;
         private System.Windows.Forms.Label label4;
-        private System.Windows.Forms.Label label5;
+        private System.Windows.Forms.Label SerialPortLabel;
         private System.Windows.Forms.ComboBox SerialPortList;
         private System.Windows.Forms.TextBox SerialOutput;
         private System.Windows.Forms.CheckBox EnableHoloseat;
         private System.Windows.Forms.ComboBox HardwareType;
-        private System.Windows.Forms.Label label7;
+        private System.Windows.Forms.Label HardwareLabel;
         private System.Windows.Forms.Label label6;
-        private System.Windows.Forms.Label label8;
+        private System.Windows.Forms.Label BackwardKeyLabel;
         private System.Windows.Forms.TextBox WalkBackwardKey;
+        private System.Windows.Forms.Label ArduinoPathLabel;
+        private System.Windows.Forms.TextBox ArduinoPath;
     }
 }
\ No newline at end of file
Index: trunk/HoloseatConfigurationApp_Win/Configuration.cs
===================================================================
--- trunk/HoloseatConfigurationApp_Win/Configuration.cs	(revision 50)
+++ trunk/HoloseatConfigurationApp_Win/Configuration.cs	(revision 51)
@@ -31,6 +31,7 @@
     public partial class Configuration : Form
 
     {
+        //Create the variable for handling the holoseat and set defaults using the constructor
         private HoloseatConfigurationFile HoloConfig = new HoloseatConfigurationFile(); 
         public Configuration()
         {
@@ -39,6 +40,7 @@
             WalkBackwardKey.Text = HoloConfig.WalkBackwardCommandChar.ToString();
             TriggerSteps.Value = Convert.ToInt16(HoloConfig.TriggerStepsPerMin);
             TriggerStepsNumber.Text = TriggerSteps.Value.ToString();
+            ArduinoPath.Text = HoloConfig.ArduinoPath.ToString();
             int x = 1;
 
             foreach (string s in SerialPort.GetPortNames())
@@ -75,20 +77,9 @@
             HoloConfig.SerialPort = SerialPortList.SelectedItem.ToString();
             HoloConfig.HardwareType = HardwareType.SelectedItem.ToString();
             SerialOutput.Text = HoloConfig.SendConfig();
-            //Original code which executed a reprogram.  Being replaced with code to talk to the serial port.
-            //Result.Text = HoloConfig.WriteConfiguration();
-            //UpdateResult = HoloConfig.UpdateHoloseat();
-            //switch (UpdateResult)
-            //{
-            //    case 0:
-            //        UploadResult.Text = "Success";
-            //        break;
-            //    default:
-            //        UploadResult.Text = "Failed to upload(Error code:" + UpdateResult.ToString() + ").";
-            //        break;
-            //}
         }
 
+//Write a new confriguration file and push it to the holoseat using the Arduino software    
         private void UpdateDefaults_Click(object sender, EventArgs e)
         {
             Result.Text = "";
@@ -99,20 +90,25 @@
             HoloConfig.WalkBackwardCommandChar = Convert.ToChar(WalkBackwardKey.Text);
             HoloConfig.SerialPort = SerialPortList.SelectedItem.ToString();
             HoloConfig.HardwareType = HardwareType.SelectedItem.ToString();
+            HoloConfig.ArduinoPath = ArduinoPath.Text;
             string SaveResult;
             SaveResult = HoloConfig.WriteConfiguration();
-            UpdateResult = HoloConfig.UpdateHoloseat();
-            switch (UpdateResult)
-            {
-                case 0:
-                    UploadResult.Text="Success";
-                    break;
-                default:
-                    UploadResult.Text="Failed to upload(Error code:"+ UpdateResult.ToString()+").";
-                    break;
+            if (File.Exists(HoloConfig.ArduinoPath)) {
+                UpdateResult = HoloConfig.UpdateHoloseat();
+                switch (UpdateResult)
+                {
+                    case 0:
+                        UploadResult.Text = "Success";
+                        break;
+                    default:
+                        UploadResult.Text = "Failed to upload(Error code:" + UpdateResult.ToString() + ").";
+                        break;
+                }
+                Result.Text = SaveResult;
             }
-            Result.Text = SaveResult;
-
+            else{
+                Result.Text = "Error:  Arduino executable not found in specified path.";
+            }
         }
 
         private void WalkKey_TextChanged(object sender, EventArgs e)
@@ -158,5 +154,15 @@
         {
 
         }
+
+        private void label9_Click(object sender, EventArgs e)
+        {
+
+        }
+
+        private void ArduinoPath_TextChanged(object sender, EventArgs e)
+        {
+
+        }
     }
 }
